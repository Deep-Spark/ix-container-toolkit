// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api.proto

package alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SdkService_QueryCache_FullMethodName     = "/alpha.SdkService/QueryCache"
	SdkService_PrepareCache_FullMethodName   = "/alpha.SdkService/PrepareCache"
	SdkService_CheckoutSdk_FullMethodName    = "/alpha.SdkService/CheckoutSdk"
	SdkService_CheckoutDriver_FullMethodName = "/alpha.SdkService/CheckoutDriver"
	SdkService_Reset_FullMethodName          = "/alpha.SdkService/Reset"
	SdkService_ListCache_FullMethodName      = "/alpha.SdkService/ListCache"
	SdkService_ListImage_FullMethodName      = "/alpha.SdkService/ListImage"
)

// SdkServiceClient is the client API for SdkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkServiceClient interface {
	// Query cache for an image
	QueryCache(ctx context.Context, in *QueryCacheRequest, opts ...grpc.CallOption) (*QueryCacheResponse, error)
	PrepareCache(ctx context.Context, in *PrepareCacheRequest, opts ...grpc.CallOption) (*PrepareCacheResponse, error)
	CheckoutSdk(ctx context.Context, in *CheckoutSdkRequest, opts ...grpc.CallOption) (*CheckoutSdkResponse, error)
	CheckoutDriver(ctx context.Context, in *CheckoutDriverRequest, opts ...grpc.CallOption) (*CheckoutDriverResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error)
	ListImage(ctx context.Context, in *ListImageRequest, opts ...grpc.CallOption) (*ListImageResponse, error)
}

type sdkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkServiceClient(cc grpc.ClientConnInterface) SdkServiceClient {
	return &sdkServiceClient{cc}
}

func (c *sdkServiceClient) QueryCache(ctx context.Context, in *QueryCacheRequest, opts ...grpc.CallOption) (*QueryCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCacheResponse)
	err := c.cc.Invoke(ctx, SdkService_QueryCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkServiceClient) PrepareCache(ctx context.Context, in *PrepareCacheRequest, opts ...grpc.CallOption) (*PrepareCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareCacheResponse)
	err := c.cc.Invoke(ctx, SdkService_PrepareCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkServiceClient) CheckoutSdk(ctx context.Context, in *CheckoutSdkRequest, opts ...grpc.CallOption) (*CheckoutSdkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckoutSdkResponse)
	err := c.cc.Invoke(ctx, SdkService_CheckoutSdk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkServiceClient) CheckoutDriver(ctx context.Context, in *CheckoutDriverRequest, opts ...grpc.CallOption) (*CheckoutDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckoutDriverResponse)
	err := c.cc.Invoke(ctx, SdkService_CheckoutDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, SdkService_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkServiceClient) ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCacheResponse)
	err := c.cc.Invoke(ctx, SdkService_ListCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkServiceClient) ListImage(ctx context.Context, in *ListImageRequest, opts ...grpc.CallOption) (*ListImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImageResponse)
	err := c.cc.Invoke(ctx, SdkService_ListImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkServiceServer is the server API for SdkService service.
// All implementations must embed UnimplementedSdkServiceServer
// for forward compatibility.
type SdkServiceServer interface {
	// Query cache for an image
	QueryCache(context.Context, *QueryCacheRequest) (*QueryCacheResponse, error)
	PrepareCache(context.Context, *PrepareCacheRequest) (*PrepareCacheResponse, error)
	CheckoutSdk(context.Context, *CheckoutSdkRequest) (*CheckoutSdkResponse, error)
	CheckoutDriver(context.Context, *CheckoutDriverRequest) (*CheckoutDriverResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error)
	ListImage(context.Context, *ListImageRequest) (*ListImageResponse, error)
	mustEmbedUnimplementedSdkServiceServer()
}

// UnimplementedSdkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSdkServiceServer struct{}

func (UnimplementedSdkServiceServer) QueryCache(context.Context, *QueryCacheRequest) (*QueryCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCache not implemented")
}
func (UnimplementedSdkServiceServer) PrepareCache(context.Context, *PrepareCacheRequest) (*PrepareCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCache not implemented")
}
func (UnimplementedSdkServiceServer) CheckoutSdk(context.Context, *CheckoutSdkRequest) (*CheckoutSdkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutSdk not implemented")
}
func (UnimplementedSdkServiceServer) CheckoutDriver(context.Context, *CheckoutDriverRequest) (*CheckoutDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutDriver not implemented")
}
func (UnimplementedSdkServiceServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedSdkServiceServer) ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCache not implemented")
}
func (UnimplementedSdkServiceServer) ListImage(context.Context, *ListImageRequest) (*ListImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (UnimplementedSdkServiceServer) mustEmbedUnimplementedSdkServiceServer() {}
func (UnimplementedSdkServiceServer) testEmbeddedByValue()                    {}

// UnsafeSdkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdkServiceServer will
// result in compilation errors.
type UnsafeSdkServiceServer interface {
	mustEmbedUnimplementedSdkServiceServer()
}

func RegisterSdkServiceServer(s grpc.ServiceRegistrar, srv SdkServiceServer) {
	// If the following call pancis, it indicates UnimplementedSdkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SdkService_ServiceDesc, srv)
}

func _SdkService_QueryCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).QueryCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_QueryCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).QueryCache(ctx, req.(*QueryCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkService_PrepareCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).PrepareCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_PrepareCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).PrepareCache(ctx, req.(*PrepareCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkService_CheckoutSdk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutSdkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).CheckoutSdk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_CheckoutSdk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).CheckoutSdk(ctx, req.(*CheckoutSdkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkService_CheckoutDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).CheckoutDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_CheckoutDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).CheckoutDriver(ctx, req.(*CheckoutDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkService_ListCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).ListCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_ListCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).ListCache(ctx, req.(*ListCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkService_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkServiceServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkService_ListImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkServiceServer).ListImage(ctx, req.(*ListImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SdkService_ServiceDesc is the grpc.ServiceDesc for SdkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alpha.SdkService",
	HandlerType: (*SdkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCache",
			Handler:    _SdkService_QueryCache_Handler,
		},
		{
			MethodName: "PrepareCache",
			Handler:    _SdkService_PrepareCache_Handler,
		},
		{
			MethodName: "CheckoutSdk",
			Handler:    _SdkService_CheckoutSdk_Handler,
		},
		{
			MethodName: "CheckoutDriver",
			Handler:    _SdkService_CheckoutDriver_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _SdkService_Reset_Handler,
		},
		{
			MethodName: "ListCache",
			Handler:    _SdkService_ListCache_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _SdkService_ListImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
